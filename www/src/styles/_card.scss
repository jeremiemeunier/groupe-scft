@use "sass:color";
@use "sass:map";

@mixin container($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $radius: map.get($map: $theme, $key: 'radius');

  &.card-container {
    display: grid;
    gap: 8px;

    @extend .grid;

    &.format-list {
      grid-row-gap: 0;

      border: 1px solid rgba(map.get($map: $colors, $key: 'content'), .3);
      border-radius: map.get($map: $radius, $key: 'medium');
      overflow: hidden;

      .card {
        border: none;
        border-bottom: 1px solid rgba(map.get($map: $colors, $key: 'content'), .3);
        border-radius: 0;

        &:is(:last-child) {
          border-bottom: none;
        }
      }
    }
  }
}

@mixin card($theme) {
  $colors: map.get($map: $theme, $key: "colors");
  $shades: map.get($map: $theme, $key: "shades");
  $color_schemas: map.get($map: $theme, $key: "color_schemas");
  $radius: map.get($map: $theme, $key: "radius");
  $fonts: map.get($map: $theme, $key: "fonts");
  $fontsize: map.get($map: $theme, $key: "fontsize");

  a.card {
    transition:
      box-shadow .3s ease-in-out,
      background-color .3s ease-in-out,
      border-color .3s ease-in-out;

    &:hover {
      @if($color_schemas =="dark") {
        background-color: color.adjust($color: map.get($colors, 'background_2'), $lightness: 5%);
      }

      @else {
        background-color: color.adjust($color: map.get($colors, 'background_2'), $lightness: -5%);
      }
    }

    .action-icon {
      color: map.get($map: $colors, $key: "main");
    }
  }

  &.card {
    display: grid;
    align-items: center;
    grid-auto-rows: min-content;
    row-gap: 8px;

    min-height: 48px;
    border-radius: map.get($map: $radius, $key: 'small');
    border: 1px solid transparent;
    background: map.get($map: $colors, $key: 'background_1');
    box-shadow: 0 0 32px rgba(0, 0, 0, .1);

    color: map.get($map: $colors, $key: 'content');
    text-decoration: none;

    &.active {
      box-shadow: 0 0 24px rgba(0, 0, 0, .2);
      border-color: map.get($map: $colors, $key: "main");
      background-color: map.get($map: $colors, $key: "background_2");
    }

    &.format-icon-both {
      grid-template-columns: 48px 1fr 48px;
      column-gap: 8px;
    }

    &.no-shadow {
      box-shadow: none;
    }

    &.state-loader {
      @extend .anim-skeleton;
      border-color: transparent;

      &.format-border {
        border-color: rgba(map.get($map: $colors, $key: 'content'), .3);
        background-color: transparent;
      }
    }

    &.aspect {
      &.square {
        aspect-ratio: 1/1;
      }
    }

    &.color {
      @each $name, $value in $shades {
        &.shade-#{$name} {
          background-color: $value;
          color: color.adjust($color: $value, $lightness: -60%);

          &:is(a) {
            &:hover {
              box-shadow: 0 0 32px $value;
            }
          }
        }
      }
    }
  }
}