@use "sass:color";
@use "sass:map";

@mixin global($theme) {
  $fontsize: map.get($map: $theme, $key: 'fontsize');
  $colors: map.get($map: $theme, $key: 'colors');
  $radius: map.get($map: $theme, $key: 'radius');

  &.form {
    display: grid;
    grid-auto-flow: row;
    grid-auto-rows: min-content;
    gap: 32px;
  }

  &.form-auth {
    border: 1px solid rgba(map.get($colors, "content"), .3);
    padding: 24px;
    border-radius: map.get($map: $radius, $key: "large");
    backdrop-filter: blur(8px);

    .confetti {
      position: absolute;
      left: -24px !important;
      right: -24px !important;
      top: 0 !important;
      bottom: -24px !important;

      width: calc(100% + 48px);
      height: calc(100% + 24px);
      border-radius: map.get($map: $radius, $key: "large");
    }
  }

  &.form-msg {
    display: grid;
    grid-auto-rows: min-content;
    grid-auto-flow: row;
    align-items: center;
    align-content: center;
    row-gap: 4px;

    padding: 8px;
    margin: 0;
    background: map.get($map: $colors, $key: 'background_2');
    border-radius: map.get($map: $radius, $key: 'small') - 4px;

    &.little {
      font-size: map.get($map: $fontsize, $key: 'small');
    }

    p {
      padding: 0;
    }

    span {
      display: grid;
      grid-template-columns: 24px 1fr;
      align-items: center;
      align-content: center;
    }
  }
}

@mixin container($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $fonts: map.get($map: $theme, $key: 'fonts');
  $fontsize: map.get($map: $theme, $key: 'fontsize');
  $radius: map.get($map: $theme, $key: 'radius');
  $color_schemas: map.get($map: $theme, $key: 'color_schemas');

  &.form-container {
    display: grid;
    grid-auto-flow: row;
    grid-auto-rows: min-content;
    justify-content: stretch;
    justify-items: stretch;
    gap: 8px;

    position: relative;
    box-sizing: border-box;

    &.direction-col {
      grid-auto-flow: column;
      grid-auto-columns: 1fr;
    }

    &.form-submit {
      grid-auto-flow: column dense;
      grid-auto-columns: min-content;
      justify-content: end;

      &.direction-row {
        grid-auto-flow: row;
        grid-template-columns: 1fr;

        .cta {
          width: auto;
        }
      }

      @media all and (max-width: 768px) {
        grid-auto-flow: row;
        grid-template-columns: 1fr;

        .cta {
          width: auto;
        }
      }
    }

    >label {
      display: flex;
      align-items: center;
      justify-content: space-between;

      min-height: 20px;
      padding: 0 16px;

      font-family: map.get($map: $fonts, $key: 'text');
      font-size: map.get($map: $fontsize, $key: 'text');

      span.form-required {
        display: flex;

        border-radius: map.get($radius, "large");
        background: map.get($map: $colors, $key: 'main');
        padding: 4px 8px;

        color: map.get($map: $colors, $key: 'background_1');
        font-size: map.get($map: $fontsize, $key: 'small');
      }
    }

    .form-tagline {
      padding: 0 16px;

      color: map.get($map: $colors, $key: 'content');
      font-size: map.get($map: $fontsize, $key: 'small');

      &:is(a) {
        text-decoration: underline;
      }
    }
  }

  &.form-input,
  &.form-select {
    display: grid;
    justify-content: stretch;
    justify-items: stretch;
    align-content: stretch;
    grid-template-rows: minmax(40px, 1fr);
    grid-auto-rows: min-content;
    gap: 2px;

    position: relative;

    min-height: 48px;
    border-width: 1px;
    border-style: solid;
    border-color: rgba(map.get($colors, "content"), .3);
    background-color: color.adjust($color: map.get($colors, "background_1"), $lightness: -5%);
    border-radius: map.get($radius, "small");
    box-sizing: border-box;
    padding: 3px;
    outline-width: 0;
    outline-style: solid;
    outline-color:
      rgba($color: map.get($colors, 'main'), $alpha: .3);

    color: map.get($map: $colors, $key: 'content');

    transition:
      border-color .3s ease-in-out,
      background-color .3s ease-in-out,
      outline-width .1s ease-in-out;

    &.transparency {
      border: none;
      background: none;

      input {
        padding: 0;
        margin: 0;
      }
    }

    &.ff-title {
      input {
        font-family: map.get($map: $fonts, $key: "title");
      }
    }

    &.heading {
      @each $name, $value in $fontsize {
        &.size-#{$name} {
          input {
            font-size: $value;
          }
        }
      }
    }

    &.label {
      input {
        opacity: .6;
      }
    }

    &.state-focus,
    &:focus-within {
      border-color: map.get($map: $colors, $key: 'main');
      outline-width: 4px;
    }

    &.schema-max-length {
      grid-template-columns: 1fr min-content;

      .form-message {
        grid-column-start: span 2;
      }
    }

    &.state-negative {
      border-color: map.get($map: $colors, $key: 'negative');
      background-color: rgba($color: map.get($colors, 'negative'), $alpha: .2);

      @extend .animation-error;

      .form-message {
        color: map.get($map: $colors, $key: 'negative');
      }
    }

    &.state-positive {
      border-color: map.get($map: $colors, $key: 'positive');
      background-color: rgba($color: map.get($colors, 'positive'), $alpha: .1);

      .form-message {
        color: map.get($map: $colors, $key: 'positive');
      }
    }

    .form-explain {
      border-radius: 2px;
      padding: 8px;
      background-color:
        rgba($color: map.get($map: $colors, $key: 'main'), $alpha: .3);

      font-size: map.get($map: $fontsize, $key: 'small');
    }

    input:focus+.form-max-length,
    textarea:focus+.form-max-length {
      background-color: color.adjust($color: map.get($colors, "main"), $lightness: -60%);
      border-color: rgba(map.get($colors, "main"), .3);

      @if ($color_schemas =="default") {
        background-color: color.adjust($color: map.get($colors, "main"), $lightness: 20%);
      }
    }

    .form-max-length {
      display: grid;
      justify-self: end;
      align-content: center;

      margin: 2px;
      padding: 8px;
      border-width: 1px;
      border-style: solid;
      border-color: rgba(map.get($colors, "content"), .3);
      border-radius: map.get($map: $radius, $key: 'small') - 4px;
      background-color: color.adjust($color: map.get($colors, "background_1"), $lightness: -5%);

      font-size: map.get($map: $fontsize, $key: 'small');
      font-weight: 500;
      white-space: nowrap;

      transition:
        background-color .3s ease-in-out;
    }

    .form-message {
      padding: 0 16px;
      margin: 0;
    }
  }

  &.form-select {
    select {
      padding-right: 48px;
    }

    .icon {
      position: absolute;
      top: 50%;
      right: 16px;

      transform: translateY(-50%);
      pointer-events: none;
    }
  }
}

@mixin input($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $fonts: map.get($map: $theme, $key: 'fonts');
  $fontsize: map.get($map: $theme, $key: 'fontsize');
  $radius: map.get($map: $theme, $key: 'radius');
  $color_schemas: map.get($map: $theme, $key: 'color_schemas');

  input,
  select,
  button,
  textarea {
    all: unset;
  }

  input,
  select,
  button,
  textarea {
    align-items: center;

    position: relative;

    padding: 0 16px;
    min-height: 100%;
    border-radius: map.get($map: $radius, $key: 'small') - 4px;

    color: inherit;
    font-family: map.get($map: $fonts, $key: 'text');
    text-decoration: none;
    font-size: map.get($map: $fontsize, $key: 'text');

    @if($color_schemas =="dark") {
      transition: background-color .3s ease-in-out;

      option {
        color: map.get($map: $colors, $key: 'background_1');
      }
    }
  }

  input,
  textarea {

    &:read-only,
    &:disabled {
      cursor: not-allowed;
      background-color: map.get($colors, 'content');

      color: map.get($map: $colors, $key: 'background_1');
    }
  }

  select {
    cursor: pointer;

    &:disabled {
      cursor: not-allowed;
      background-color: map.get($colors, 'content');

      color: map.get($map: $colors, $key: 'background_1');

      +.icon {
        color: map.get($map: $colors, $key: 'background_1');
      }
    }
  }

  textarea {
    padding: 16px;
    min-height: 80px;
    height: fit-content;
    resize: vertical;

    line-height: 1.2em;
  }
}

@mixin fileInput($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $radius: map.get($map: $theme, $key: 'radius');
  $schemas_colors: map.get($map: $theme, $key: 'schemas_colors');
  $fontsize: map.get($map: $theme, $key: 'fontsize');

  &.form-file {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: min-content 1fr;
    align-items: center;
    gap: 16px;

    input[type="file"] {
      display: none;

      +label {
        border-radius: map.get($map: $radius, $key: 'small') - 4px;
      }
    }

    p {
      white-space: nowrap;
    }
  }
}

@mixin autocomplete($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $radius: map.get($map: $theme, $key: 'radius');

  &.form-autocomplete-list-root {
    position: absolute;
    top: calc(100% + 8px);
    left: -2px;
    right: -2px;

    z-index: 2;

    border-color: rgba(map.get($colors, "content"), .3);
    border-width: 1px;
    border-style: solid;
    border-radius: map.get($map: $radius, $key: 'small');
    background-color: color.adjust($color: map.get($colors, "background_1"), $lightness: -5%);
    box-shadow: 0 8px 12px rgba($color: #000000, $alpha: .2);
    padding: 8px 0;
  }

  &.autocomplete-root-input {
    display: grid;
    grid-template-columns: 1fr 40px;
    align-items: center;

    i.icon {
      cursor: pointer;
    }
  }

  &.form-autocomplete-list {
    display: grid;
    grid-auto-flow: row;
    grid-auto-rows: 40px;

    a,
    button {
      display: grid;
      align-items: center;
      align-content: center;

      padding: 0 16px;
      min-height: 40px;
      border-radius: 0;

      cursor: pointer;

      &:hover {
        background-color: map.get($map: $colors, $key: 'background_2');
      }
    }
  }
}

@mixin radio($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $radius: map.get($map: $theme, $key: 'radius');

  &.form-radio {

    input[type="radio"] {
      display: none;

      &:not(:checked) {
        +label:after {
          opacity: 0;
        }

        +label:hover:after {
          opacity: .5;
        }
      }

      &:checked {
        +label {
          background-color:
            rgba($color: map.get($colors, 'main'), $alpha: .3);
        }
      }

      &:disabled {
        +label {
          cursor: not-allowed;
        }

        +label:before {
          border-color: map.get($map: $colors, $key: 'content');
          opacity: .5;
        }

        +label:hover:after,
        +label:after {
          background-color: map.get($map: $colors, $key: 'content');
          opacity: 0;
        }
      }

      +label:before,
      +label:after {
        position: absolute;
        top: 8px;
        left: 14px;

        width: 24px;
        height: 24px;
        border: 2px solid map.get($map: $colors, $key: 'main');
        border-radius: 50%;
        box-sizing: border-box;
        background-color: map.get($map: $colors, $key: 'background_1');

        content: '';

        transition:
          background-color .3s ease-in-out,
          border-color .3s ease-in-out,
          opacity .3s ease-in-out;
      }

      +label:after {
        width: 16px;
        height: 16px;
        border: none;
        background-color: map.get($map: $colors, $key: 'main');
        margin: 0 4px;
      }
    }

    label {
      display: grid;
      align-items: center;
      align-content: center;

      position: relative;

      min-height: 40px;
      padding-left: 56px;
      padding-right: 16px;
      border-radius: map.get($map: $radius, $key: 'medium') - 4px;

      cursor: pointer;
      transition:
        background-color .3s ease-in-out;
    }
  }
}

@mixin checkbox($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $fonts: map.get($map: $theme, $key: 'fonts');
  $radius: map.get($map: $theme, $key: 'radius');

  &.form-checkbox {

    input[type="checkbox"] {
      display: none;

      &:not(:checked) {
        +label:after {
          opacity: 0;
        }

        +label:hover:after {
          opacity: .5;
        }
      }

      &:checked {
        +label {
          background-color:
            rgba($color: map.get($colors, 'main'), $alpha: .3);

          &:after {
            content: '\e966'; // Must change when teaui-icon was released
            font-family: "teaui-icon";
          }
        }
      }

      &:indeterminate {
        +label:after {
          content: '\e9b1'; // Must change when teaui-icon was released
          color: map.get($map: $colors, $key: 'main');
          opacity: 1;
          background-color: transparent;
        }
      }

      &:disabled {
        +label {
          cursor: not-allowed;
        }

        +label:before {
          border-color: map.get($map: $colors, $key: 'content');
          opacity: .5;
        }

        +label:hover:after,
        +label:after {
          background-color: map.get($map: $colors, $key: 'content');
          opacity: 0;
        }
      }

      +label:before,
      +label:after {
        position: absolute;
        top: 8px;
        left: 8px;

        width: 24px;
        height: 24px;
        border: 1px solid map.get($map: $colors, $key: 'main');
        border-radius: 4px;
        box-sizing: border-box;
        background-color: map.get($map: $colors, $key: 'background_1');

        content: '';
        font-family: map.get($map: $fonts, $key: 'icon');

        transition:
          background-color .3s ease-in-out,
          border-color .3s ease-in-out,
          opacity .3s ease-in-out;
      }

      +label:after {
        display: grid;
        align-content: center;
        justify-content: center;

        width: 24px;
        height: 24px;
        border: none;
        background-color: map.get($map: $colors, $key: 'main');

        color: map.get($map: $colors, $key: 'background_1');
        font-size: 20px;
      }
    }

    label {
      display: flex;
      align-items: center;
      align-content: center;

      position: relative;

      width: auto;
      min-width: 40px;
      min-height: 40px;
      border-radius: map.get($map: $radius, $key: 'small') - 4px;
      padding-left: 40px;

      white-space: pre-wrap;
      word-wrap: break-word;

      cursor: pointer;
      transition:
        background-color .3s ease-in-out;
    }

    &.format-nolabel label {
      padding-left: 0;
      max-width: 40px;
    }
  }
}

@mixin checkbox-line($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $fonts: map.get($map: $theme, $key: 'fonts');
  $radius: map.get($map: $theme, $key: 'radius');
  $schemas_colors: map.get($map: $theme, $key: 'color_schemas');

  &.form-checkbox-no-check {

    input[type="checkbox"] {
      display: none;

      &:checked {
        +label {
          background-color: map.get($map: $colors, $key: 'main');

          @if ($schemas_colors =="dark") {
            color: map.get($map: $colors, $key: 'background_1');
          }
        }
      }
    }

    label {
      display: flex;
      align-items: center;
      align-content: center;

      position: relative;

      padding: 16px;
      border-radius: map.get($map: $radius, $key: 'medium') - 4px;
      border: 1px solid rgba(map.get($colors, "content"), .3);

      white-space: pre-wrap;
      word-wrap: break-word;

      cursor: pointer;
      transition:
        background-color .3s ease-in-out;

      &:hover {
        background-color: map.get($map: $colors, $key: 'background_2');
      }
    }
  }
}

@mixin radio-line($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $fonts: map.get($map: $theme, $key: 'fonts');
  $radius: map.get($map: $theme, $key: 'radius');
  $schemas_colors: map.get($map: $theme, $key: 'color_schemas');

  &.form-radio-no-check {

    input[type="radio"] {
      display: none;

      &:checked {
        +label {
          background-color: map.get($map: $colors, $key: 'main');

          @if ($schemas_colors =="default") {
            color: map.get($map: $colors, $key: 'background_1');
          }
        }
      }
    }

    label {
      display: flex;
      align-items: center;
      align-content: center;

      position: relative;

      padding: 16px;
      border-radius: map.get($map: $radius, $key: 'medium') - 4px;

      white-space: pre-wrap;
      word-wrap: break-word;

      cursor: pointer;
      transition:
        background-color .3s ease-in-out;

      &:hover {
        background-color: map.get($map: $colors, $key: 'background_2');
      }
    }
  }
}

@mixin group($theme) {

  &.form-group {
    display: grid;
    align-items: start;
    gap: 16px;

    @extend .grid;

    .form-submit {
      grid-auto-columns: 1fr;
      align-self: end;

      .cta {
        width: auto;
      }
    }

    .cta {
      width: auto;
    }

    @media all and (max-width: 768px) {

      &.tc-2 ms-tc-2,
      &.template-3col,
      &.template-4col {
        grid-template-columns: 1fr;

        .group-size-2col,
        .group-size-3col {
          grid-column: span 1;
        }
      }
    }
  }
}

@mixin password($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $fontsize: map.get($map: $theme, $key: 'fontsize');
  $radius: map.get($map: $theme, $key: 'radius');

  &.form-password {
    display: grid;
    grid-template-columns: 1fr 40px;
    column-gap: 0;

    input[type="text"] {
      border-radius:
        (map.get($map: $radius, $key: 'small') - 4px) 0 0 (map.get($map: $radius, $key: 'small') - 4px);
      background-color: map.get($map: $colors, $key: 'main');

      color: map.get($map: $colors, $key: 'background_1');

      +.password-switch {
        border-radius:
          0 (map.get($map: $radius, $key: 'small') - 4px) (map.get($map: $radius, $key: 'small') - 4px) 0;
        background: map.get($map: $colors, $key: 'main');

        &:focus,
        &:target,
        &:hover {
          outline: none;
          background-color: map.get($map: $colors, $key: 'content');
        }
      }
    }

    .password-switch {
      display: grid;
      align-content: center;
      justify-content: center;

      border-radius: map.get($map: $radius, $key: 'small') - 4px;
      background-color: map.get($map: $colors, $key: 'content');
      border: none;
      padding: 0;
      outline: none;
      cursor: pointer;

      color: map.get($map: $colors, $key: 'background_1');
      transition:
        background-color .3s ease-in-out;

      &:focus,
      &:target,
      &:hover {
        outline: none;
        background-color: map.get($map: $colors, $key: 'main');
      }
    }
  }
}

@mixin dragAndDrop($theme) {
  $colors: map.get($theme, 'colors');
  $radius: map.get($map: $theme, $key: 'radius');

  &.dnd-container {
    display: grid;
    grid-template-columns: 2fr 1fr;
    border-radius: map.get($map: $radius, $key: 'medium');
  }

  &.upload-progress {
    display: grid;

    position: relative;

    border: 2px solid map.get($map: $colors, $key: 'content');
    border-radius: map.get($map: $radius, $key: 'medium');
    padding: 16px;
    overflow: hidden;

    .upload-progress-bar {
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;

      z-index: -1;

      width: 0%;
      background: map.get($map: $colors, $key: 'background_2');
    }

    .upload-progress-label {
      display: grid;
      grid-template-columns: 40px 1fr 64px;
      align-items: center;

      span:last-child {
        justify-self: end;
      }
    }
  }

  &.form-drag-n-drop {
    display: grid;
    grid-template-rows: 1fr min-content;
    row-gap: 8px;
    justify-content: stretch;

    border-radius: map.get($map: $radius, $key: 'medium') - 6px;

    // Size vertical
    $i: 1;

    @while $i <=10 {
      &.sv-#{$i * 10} {
        min-height: 10vh * $i;
      }

      &.msv-#{$i * 10} {
        max-height: 10vh * $i;
        overflow: hidden;
      }

      $i: $i + 1;
    }

    >p {
      padding: 0 24px;
    }

    >label {
      align-items: center;
      align-content: center;

      border-radius: map.get($map: $radius, $key: 'medium') - 8px;
      border: 1px solid rgba($color: map.get($colors, 'content'), $alpha: .3);
      background: map.get($colors, 'background_2');
    }

    input {
      display: none;
    }

    .form-drop-zone {
      display: grid;
      justify-content: center;
      justify-items: center;

      border-radius: map.get($map: $radius, $key: 'medium') - 8px;
      padding: 32px;

      p {
        padding: 0;
        text-align: center;
      }
    }
  }

  &.file-drop-root {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: 1fr;
    align-items: stretch;
    align-content: stretch;
    gap: 8px;

    position: relative;

    min-height: 160px;

    @media all and (max-width: 768px) {
      grid-template-columns: 1fr;
      grid-template-rows: 2fr 1fr;
    }

    input {
      display: none;
    }

    .drop-infos {
      display: grid;
      align-items: center;
      justify-content: center;

      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;

      z-index: 2;
      pointer-events: none;
      background: rgba($color: map.get($map: $colors, $key: 'main'), $alpha: .4);
      border-radius: map.get($map: $radius, $key: 'medium') - 4px;

      p {
        margin: 0;
        padding: 0;
      }
    }

    .file-drop-dock {
      display: grid;
      grid-auto-rows: min-content;
      gap: 8px;
      align-items: center;
      align-content: center;
      justify-content: center;
      justify-items: center;

      background: map.get($map: $colors, $key: 'background_2');
      border-radius: map.get($map: $radius, $key: 'medium') - 4px;

      p {
        margin: 0;
        padding: 0;
        text-align: center;
      }
    }
  }
}

@mixin totp($theme) {

  .infusedui-totp-root {

    .totp-fields {
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: 1fr;
      column-gap: 8px;

      input {
        width: 100%;
        padding: 0;

        text-align: center;
      }
    }
  }
}

@mixin datepicker($theme) {
  $colors: map.get($map: $theme, $key: 'colors');
  $radius: map.get($map: $theme, $key: 'radius');

  .datepicker-root-input {
    display: grid;
    grid-template-columns: 1fr 40px;
    align-items: center;

    i.icon {
      cursor: pointer;
    }
  }

  .datepicker-calendar-root {
    position: absolute;
    top: calc(100% + 8px);
    right: -2px;

    z-index: 2;

    min-width: 320px;
    width: calc(100% + 4px);
    max-width: 320px;
    border-color: rgba(map.get($colors, "content"), .3);
    border-width: 1px;
    border-style: solid;
    border-radius: map.get($map: $radius, $key: 'small');
    background-color: color.adjust($color: map.get($colors, "background_1"), $lightness: -5%);
    box-shadow: 0 0 24px rgba($color: #000000, $alpha: .2);
    padding: 8px 0;

    .datepicker-calendar-month {
      display: grid;
      grid-template-columns: 32px 1fr 32px;
      align-items: center;
      justify-items: center;
      column-gap: 8px;

      padding: 0 8px;

      transition:
        outline-width .1s ease-in-out,
        background-color .3s ease-in-out,
        color .3s ease-in-out;

      div {
        display: grid;
        column-gap: 8px;
        grid-template-columns: min-content;
        grid-auto-flow: column;
        grid-auto-columns: min-content;
      }

      select {
        height: 32px;
        border-width: 1px;
        border-style: solid;
        border-color: rgba(map.get($colors, "content"), .3);
        border-radius: map.get($map: $radius, $key: "small") - 4px;
        box-sizing: border-box;
      }

      div>button {
        min-height: 32px;
        box-sizing: border-box;
        border-width: 1px;
        border-style: solid;
        border-color: rgba(map.get($colors, "content"), .3);
        border-radius: map.get($map: $radius, $key: "small") - 4px;
        padding: 0 12px;
        margin: 0;

        cursor: pointer;

        &:hover {
          background-color: rgba(map.get($colors, 'content'), $alpha: .2);
        }
      }

      >button {
        display: grid;
        align-content: center;
        align-items: center;
        justify-content: center;
        justify-items: center;

        width: 32px;
        height: 32px;
        box-sizing: border-box;
        border-width: 1px;
        border-style: solid;
        border-color: rgba(map.get($colors, "content"), .3);
        border-radius: map.get($map: $radius, $key: "small") - 4px;
        padding: 0;
        margin: 0;

        cursor: pointer;

        &:hover {
          background-color: rgba(map.get($colors, 'content'), $alpha: .2);
        }
      }
    }

    .datepicker-calendar-days {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      grid-auto-flow: row;

      padding: 8px;
      margin-top: 8px;
      margin-left: 8px;
      margin-right: 8px;
      border-radius: map.get($map: $radius, $key: 'small') - 4px;
      background: map.get($map: $colors, $key: "background_1");
      box-sizing: border-box;

      .datepicker-day-label {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        grid-column-end: span 7;
        align-content: center;
        align-items: center;
        justify-content: center;
        justify-items: center;

        opacity: .6;
      }

      button {
        display: grid;
        align-content: center;
        align-items: center;
        justify-content: center;
        justify-items: center;

        min-height: auto;
        aspect-ratio: 1/1;
        box-sizing: border-box;
        border-radius: 4px;
        padding: 0;
        margin: 0;
        cursor: pointer;

        text-align: center;
        font-feature-settings: "tnum" 1, "dgsp";

        &:hover {
          background-color: rgba(map.get($colors, "main"), .3);
        }

        &.active {
          background-color: map.get($map: $colors, $key: "main");
        }

        &.today {
          color: map.get($map: $colors, $key: "main");

          &.active {
            color: map.get($map: $colors, $key: "content");
          }
        }

        &:disabled {
          cursor: not-allowed;
          opacity: .4;
        }
      }
    }
  }
}

@mixin progress($theme) {
  $colors: map.get($map: $theme, $key: "colors");
  $radius: map.get($map: $theme, $key: "radius");

  .infusedui-progress {
    position: relative;

    height: 8px;
    width: 100%;
    border-radius: map.get($map: $radius, $key: "small");
    border: 1px solid rgba(map.get($colors, "content"), .3);
    overflow: hidden;

    .infusedui-value {
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;

      background: map.get($map: $colors, $key: 'main');
      transition:
        width .3s ease-in-out;
    }
  }
}

@mixin search($theme) {
  $colors: map.get($map: $theme, $key: "colors");
  $radius: map.get($map: $theme, $key: "radius");

  &.search-root {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;

    position: relative;

    height: 48px;
    max-height: 48px;

    .results-root {
      position: absolute;
      top: calc(100% + 8px);
      left: 0;
      right: 0;

      background-color: map.get($map: $colors, $key: "background_2");
      border: 1px solid rgba($color: map.get($colors, 'content'), $alpha: .3);
      border-radius: map.get($map: $radius, $key: "small");
      box-shadow: 0 4px 12px rgba(0, 0, 0, .1);
      overflow: hidden;

      ul,
      li {
        padding: 0;
        margin: 0;
        list-style: none;

        a {
          display: grid;
          align-items: center;
          align-content: center;

          height: 64px;
          padding: 8px 24px;
          border: none;

          transition:
            background-color .3s;

          &:hover {
            background: rgba(map.get($colors, "content"), .1);
          }
        }
      }
    }
  }
}