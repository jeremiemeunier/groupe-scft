@use "sass:color";
@use "sass:map";

@mixin container($theme) {
  $radius: map.get($map: $theme, $key: "radius");

  .pagination {
    .cta-container {
      @media all and (max-width: 768px) {
        grid-template-columns: min-content;
        grid-auto-flow: column;
        grid-auto-columns: min-content;
      }
    }
  }

  &.cta-container {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: min-content;
    column-gap: 16px;
    row-gap: 8px;

    // Gap size
    $k: 8;

    @while $k <=64 {
      @media all and (min-width: 768px) {
        &.cgs-#{$k} {
          column-gap: 1px * $k;
        }

        &.rgs-#{$k} {
          row-gap: 1px * $k;
        }
      }

      @media all and (max-width: 768px) {
        &:not(.format-group) {
          grid-template-columns: 1fr;
          grid-auto-flow: row;
          grid-auto-rows: min-content;

          .cta {
            width: 100%;
          }
        }
      }

      $k: $k + 8;
    }

    &.ha-start {
      justify-content: start;
      justify-items: start;
    }

    &.ha-center {
      justify-content: center;
      justify-items: center;
    }

    &.ha-end {
      justify-content: end;
      justify-items: end;
    }

    &.format-row {
      grid-auto-flow: row;
      grid-auto-rows: min-content;
      grid-template-columns: 1fr;

      .cta {
        width: auto;
      }
    }

    &.format-group {
      column-gap: 0;

      .cta {
        border-radius: 0;
        margin-left: -1px;

        &:first-child {
          border-top-left-radius: map.get($map: $radius, $key: "small");
          border-bottom-left-radius: map.get($map: $radius, $key: "small");
          margin-left: 0;
        }

        &:last-child {
          border-top-right-radius: map.get($map: $radius, $key: "small");
          border-bottom-right-radius: map.get($map: $radius, $key: "small");
        }
      }
    }

    &.submit {
      margin-top: 64px;
    }
  }
}

@mixin cta($theme) {
  $colors: map.get($theme, 'colors');
  $shades: map.get($theme, 'shades');
  $brand: map.get($theme, 'brand');
  $fonts: map.get($theme, 'fonts');
  $fontsize: map.get($theme, 'fontsize');
  $schemas: map.get($theme, 'color_schemas');
  $radius_schemas: map.get($map: $theme, $key: 'radius_schemas');
  $radius: map.get($theme, 'radius');

  &.cta {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: min-content;
    grid-template-areas:
      "content";
    align-items: center;
    justify-items: center;
    align-content: center;
    justify-content: center;
    gap: 12px;

    position: relative;

    width: fit-content;
    height: 40px;
    padding: 0 16px;
    border-radius: map.get($map: $radius, $key: 'small');
    border-style: solid;
    border-width: 1px;
    border-color: transparent;
    box-sizing: border-box;
    overflow: hidden;
    cursor: pointer;

    color: map.get($map: $colors, $key: 'content');
    text-decoration: none;
    white-space: nowrap;
    font-size: map.get($map: $fontsize, $key: 'text');
    outline: 0 solid rgba(map.get($colors, 'punch'), $alpha: .4);
    outline-offset: 2px;
    transition:
      outline-width .1s ease-in-out,
      background-color .3s ease-in-out,
      color .3s ease-in-out;

    .infusedui-loader {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;

      width: 100%;
      height: 100%;
      background: rgba(map.get($colors, "background_1"), .1);
      backdrop-filter: blur(8px);
      border-radius: inherit;
    }

    &.state-loader {
      @extend .anim-skeleton;
      cursor: default;
    }

    &:disabled,
    &.state-disabled {
      opacity: .6;
      cursor: not-allowed;
    }

    &:focus,
    &:target {
      outline-width: 4px;
      z-index: 1;
    }

    span:not(.infusedui-loader) {
      grid-area: content;
      white-space: nowrap;
    }

    i.dtc-icon,
    .icon {
      grid-area: icon;
    }

    span,
    i {
      position: relative;
      z-index: 1;
    }

    &.shadow {
      box-shadow: 0 8px 12px rgba($color: #000000, $alpha: .1);
    }

    &.sm {
      gap: 8px;

      height: 32px;
      padding: 0 12px;
      border-radius: map.get($map: $radius, $key: 'small');

      font-size: map.get($map: $fontsize, $key: 'small');
      font-weight: 400;
    }

    &.sl {
      gap: 16px;

      height: 48px;
      padding: 0 24px;
      border-radius: map.get($map: $radius, $key: 'small');
    }

    // format
    &.format-icon-only {
      grid-template-columns: 24px;
      grid-template-areas:
        "icon";
      padding: 0;
      width: 40px;
      min-width: 40px;

      &.sm {
        width: 32px;
        min-width: 32px;
      }

      &.sl {
        width: 48px;
        min-width: 48px;
      }
    }

    &.format-icon-left {
      grid-template-columns: 24px min-content;
      grid-template-areas:
        "icon content";
      padding-left: 8px;

      @if($radius_schemas =="circle") {
        padding-left: 12px;
      }

      &.sm {
        padding-left: 4px;

        @if($radius_schemas =="circle") {
          padding-left: 8px;
        }
      }

      &.sl {
        padding-left: 12px;

        @if($radius_schemas =="circle") {
          padding-left: 16px;
        }
      }
    }

    &.format-icon-right {
      grid-template-columns: min-content 24px;
      grid-template-areas:
        "content icon";
      padding-right: 8px;

      @if($radius_schemas =="circle") {
        padding-right: 12px;
      }

      &.sm {
        padding-right: 4px;

        @if($radius_schemas =="circle") {
          padding-right: 8px;
        }
      }

      &.sl {
        padding-right: 12px;

        @if($radius_schemas =="circle") {
          padding-right: 16px;
        }
      }
    }

    // Level
    &.level-primary {
      background-color: map.get($map: $colors, $key: 'punch');
      border-color: rgba(map.get($colors, "content"), .3);

      color: color.adjust($color: map.get($colors, "punch"), $lightness: 60%);

      &:hover,
      &:focus,
      &:target {
        background-color: color.adjust(map.get($colors, 'punch'), $lightness: 10%);
      }

      // making all colors variants
      @each $name, $value in $colors {
        &.color-#{$name} {
          background-color: color.adjust($color: $value, $lightness: 5%);
          color: color.adjust($color: $value, $lightness: -55%);

          @if($schemas =="dark") {
            background-color: $value;
            color: map.get($map: $colors, $key: "content");
          }

          &:hover,
          &:focus,
          &:target {
            background-color: rgba($value, .3);
            color: map.get($map: $colors, $key: "content");
            border-color: color.adjust($color: $value, $lightness: -55%);

            @if($schemas =="dark") {
              background-color: color.adjust($color: $value, $lightness: -35%);
            }
          }
        }
      }

      @each $name, $value in $shades {
        &.color-#{$name} {
          background-color: color.adjust($color: $value, $lightness: -55%);
          color: color.adjust($color: $value, $lightness: 60%);

          &:hover,
          &:focus,
          &:target {
            background-color: $value;
            color: color.adjust($color: $value, $lightness: -55%);
            border-color: color.adjust($color: $value, $lightness: -55%);
            outline-color: rgba(color.adjust($color: $value, $lightness: -55%), $alpha: .4);
          }

          @if $schemas =="dark" {
            background-color: $value;
            color: color.adjust($color: $value, $lightness: -55%);
            border-color: $value;

            &:hover,
            &:focus,
            &:target {
              background-color: color.adjust($color: $value, $lightness: -55%);
              outline-color: rgba($value, $alpha: .4);
              border-color: $value;
              color: $value;
            }
          }
        }
      }

      .infusedui-loader svg circle,
      .loader svg circle {
        @if($schemas =="dark") {
          stroke: map.get($map: $colors, $key: 'background_1');
        }

        @else {
          stroke: map.get($map: $colors, $key: 'content');
        }
      }
    }

    &.level-secondary {
      background-color: color.adjust($color: map.get($colors, "background_1"), $lightness: -5%);
      border-color: rgba(map.get($colors, "content"), .3);

      &:hover,
      &:focus,
      &:target {
        background-color: color.adjust($color: map.get($colors, 'background_1'), $lightness: 20%);
      }

      // making all colors variants
      @each $name, $value in $colors {
        &.color-#{$name} {
          background-color: color.adjust($color: $value, $lightness: 5%);
          color: map.get($map: $colors, $key: "content");

          @if($schemas =="dark") {
            background-color: color.adjust($color: $value, $lightness: -55%);
            color: $value;
          }

          &:hover,
          &:focus,
          &:target {
            background-color: rgba($value, .3);
            color: map.get($map: $colors, $key: "content");

            @if($schemas =="dark") {
              background-color: color.adjust($color: $value, $lightness: -35%);
            }
          }
        }
      }
    }

    &.level-tertiary {
      background-color: transparent;
      border-color: transparent;

      &:hover,
      &:focus,
      &:target {
        background-color: rgba(map.get($colors, 'content'), $alpha: .2);
      }
    }

    &.level-negative {
      background-color: map.get($colors, 'negative');

      .loader svg circle {
        stroke: map.get($map: $colors, $key: 'content');
      }

      &:hover,
      &:focus,
      &:target {
        background-color: color.adjust(map.get($colors, 'negative'), $lightness: 10%);
      }
    }

    &.level-positive {
      background-color: map.get($colors, 'positive');

      &:hover,
      &:focus,
      &:target {
        background-color: color.adjust(map.get($colors, 'positive'), $lightness: 10%);
      }
    }

    &.level-social {

      @if($schemas =='default') {
        color: map.get($map: $colors, $key: 'background_1');
      }

      @if($schemas =='dark') {
        color: map.get($map: $colors, $key: 'content');
      }

      &.brand-discord {
        background-color: map.get($map: $brand, $key: 'discord');
      }

      &:hover,
      &:focus,
      &:target {
        background-color: color.adjust(map.get($brand, 'discord'), $lightness: 10%);
      }

      .loader svg circle {
        stroke: map.get($map: $colors, $key: 'content');

        @if($schemas =='default') {
          stroke: map.get($map: $colors, $key: 'background_1');
        }
      }
    }
  }
}